name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: pokemon_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Run test coverage
        run: npm run test:cov

      - name: Run e2e tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/pokemon_test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pokemon-api-build-${{ github.sha }}
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://pokemon-api-staging.example.com

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pokemon-api-build-${{ github.sha }}

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Aqu√≠ agregar√≠as los comandos espec√≠ficos para tu proveedor de deployment
          # Por ejemplo: railway deploy, heroku deploy, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://pokemon-api.example.com

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pokemon-api-build-${{ github.sha }}

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Aqu√≠ agregar√≠as los comandos espec√≠ficos para tu proveedor de deployment
          # Por ejemplo: railway deploy, heroku deploy, etc.
